version: '3'

x-database-variables: &database-variables
  spring.liquibase.enabled: 'true'
  spring.application.name: 'java-backend'
  spring.datasource.username: postgres_user
  spring.datasource.password: postgres_password
  spring.datasource.drive-class-name: org.postgresql.Driver
  spring.datasource.url: jdbc:postgresql://database:5432/map_tool_database
  spring.jpa.properties.hibernate.dialect: org.hibernate.dialect.PostgreSQL94Dialect
  spring.jpa.hibernate.naming.physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
  spring.jpa.hibernate.naming.implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
  spring.jpa.hibernate.ddl-auto: none
  spring.sql.init.mode: always
  spring.jpa.generate-ddl: 'true'
  spring-server-port: 5000


services:
  java_backend:
    image: 'map_tool_spring_backend:1.0.0'
    build:
      context: ./
      dockerfile: Dockerfile
    container_name: map_tool_backend_container
    ports:
      - 8080:8080
    environment:
      <<: *database-variables
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h database -p 5432"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '512M'
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 3

  database:
    image: "postgres:13-alpine"
    container_name: map_tool_postgres_container
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres_user
      - POSTGRES_PASSWORD=postgres_password
      - POSTGRES_DB=map_tool_database
    #env_file:
    # - database.env # configure postgres
    volumes:
      - ./docker/database-data:/var/lib/postgresql/data/

volumes:
  database-data: # named volumes can be managed easier using docker-compose